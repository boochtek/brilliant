require "rattler"

parser Brilliant::Parser < Rattler::Runtime::ExtendedPackratParser

%start program

%whitespace ( SPACE+ / comment )*  {
    program                     <- expression+ EOF                                                  <AST::Program.new>

    identifier                  <- @( ( ALPHA / '_' ) ( WORD / '!' / '?' )* )

    expression                  <- literal / function_call / function_definition / return
    function_call               <- identifier ~'(' arg_list ~')'                                    <AST::FunctionCall.new>
    arg_list                    <- expression? / expression ',' arg_list

    literal                     <- literal_text / literal_integer
    literal_text                <- @( quoted_text )                                                 <AST::LiteralText.new>
    literal_integer             <- hexadecimal_integer / octal_integer / binary_integer / decimal_integer
    decimal_integer             <- @( '-'? DIGIT+ )                                                 <AST::LiteralInteger.new>
    hexadecimal_integer         <- @( ~'0x' XDIGIT+ )                                               <AST::LiteralIntegerHex.new>
    octal_integer               <- @( ~'0o' ODIGIT+ )                                               <AST::LiteralIntegerOctal.new>
    binary_integer              <- @( ~'0b' BDIGIT+ )                                               <AST::LiteralIntegerBinary.new>
    ODIGIT                      <- [0-7]
    BDIGIT                      <- [0-1]

    quoted_text                 <- ~'"' ( !'"' . )* ~'"'

    function_definition         <- identifier ~'=' ~'function' function_signature code_block        <AST::FunctionDefinition.new>
    function_signature          <- typed_function_signature / void_function_signature
    typed_function_signature    <- ~'(' ~')' ~':' identifier                                        <AST::FunctionSignature.new>
    void_function_signature     <- ~'(' ~')'                                                        <AST::VoidFunctionSignature.new>
    code_block                  <- ~'{' expression+ ~'}'                                            <AST::CodeBlock.new>
    return                      <- ~'return' expression                                             <AST::Return.new>
}
comment                        <- ~([#] [^\n]*)
